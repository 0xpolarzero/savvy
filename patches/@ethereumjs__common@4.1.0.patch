diff --git a/src/common.ts b/src/common.ts
index f4394c15198693d71557c0815ba0da36b9b2aec8..ad168961d450f8776c506025e3473bac44cb63b5 100644
--- a/src/common.ts
+++ b/src/common.ts
@@ -6,17 +6,17 @@ import {
   hexToBytes,
   intToBytes,
   toType,
-} from '@ethereumjs/util'
-import { crc32 as crc } from 'crc'
-import { EventEmitter } from 'events'
+} from '@ethereumjs/util';
+import { crc32 as crc } from 'crc';
+import { EventEmitter } from 'events';
 
-import { chains as CHAIN_SPECS } from './chains.js'
-import { EIPs } from './eips.js'
-import { Chain, CustomChain, Hardfork } from './enums.js'
-import { hardforks as HARDFORK_SPECS } from './hardforks.js'
-import { parseGethGenesis } from './utils.js'
+import { chains as CHAIN_SPECS } from './chains.js';
+import { EIPs } from './eips.js';
+import { Chain, CustomChain, Hardfork } from './enums.js';
+import { hardforks as HARDFORK_SPECS } from './hardforks.js';
+import { parseGethGenesis } from './utils.js';
 
-import type { ConsensusAlgorithm, ConsensusType } from './enums.js'
+import type { ConsensusAlgorithm, ConsensusType } from './enums.js';
 import type {
   BootstrapNodeConfig,
   CasperConfig,
@@ -34,13 +34,13 @@ import type {
   HardforkByOpts,
   HardforkConfig,
   HardforkTransitionConfig,
-} from './types.js'
-import type { BigIntLike, PrefixedHexString } from '@ethereumjs/util'
+} from './types.js';
+import type { BigIntLike, PrefixedHexString } from '@ethereumjs/util';
 
-type HardforkSpecKeys = string // keyof typeof HARDFORK_SPECS
-type HardforkSpecValues = typeof HARDFORK_SPECS[HardforkSpecKeys]
+type HardforkSpecKeys = string; // keyof typeof HARDFORK_SPECS
+type HardforkSpecValues = (typeof HARDFORK_SPECS)[HardforkSpecKeys];
 
-type ParamsCacheConfig = Omit<EIPOrHFConfig, 'comment' | 'url' | 'status'>
+type ParamsCacheConfig = Omit<EIPOrHFConfig, 'comment' | 'url' | 'status'>;
 
 /**
  * Common class to access chain and hardfork parameters and to provide
@@ -51,19 +51,19 @@ type ParamsCacheConfig = Omit<EIPOrHFConfig, 'comment' | 'url' | 'status'>
  * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).
  */
 export class Common {
-  readonly DEFAULT_HARDFORK: string | Hardfork
+  readonly DEFAULT_HARDFORK: string | Hardfork;
 
-  protected _chainParams: ChainConfig
-  protected _hardfork: string | Hardfork
-  protected _eips: number[] = []
-  protected _customChains: ChainConfig[]
+  protected _chainParams: ChainConfig;
+  protected _hardfork: string | Hardfork;
+  protected _eips: number[] = [];
+  protected _customChains: ChainConfig[];
 
-  protected _paramsCache: ParamsCacheConfig = {}
-  protected _activatedEIPsCache: number[] = []
+  protected _paramsCache: ParamsCacheConfig = {};
+  protected _activatedEIPsCache: number[] = [];
 
-  protected HARDFORK_CHANGES: [HardforkSpecKeys, HardforkSpecValues][]
+  protected HARDFORK_CHANGES: [HardforkSpecKeys, HardforkSpecValues][];
 
-  public events: EventEmitter
+  public events: EventEmitter;
 
   /**
    * Creates a {@link Common} object for a custom chain, based on a standard one.
@@ -93,9 +93,9 @@ export class Common {
     chainParamsOrName: Partial<ChainConfig> | CustomChain,
     opts: CustomCommonOpts = {}
   ): Common {
-    const baseChain = opts.baseChain ?? 'mainnet'
-    const standardChainParams = { ...Common._getChainParams(baseChain) }
-    standardChainParams['name'] = 'custom-chain'
+    const baseChain = opts.baseChain ?? 'mainnet';
+    const standardChainParams = { ...Common._getChainParams(baseChain) };
+    standardChainParams['name'] = 'custom-chain';
 
     if (typeof chainParamsOrName !== 'string') {
       return new Common({
@@ -104,7 +104,7 @@ export class Common {
           ...chainParamsOrName,
         },
         ...opts,
-      })
+      });
     } else {
       if (chainParamsOrName === CustomChain.PolygonMainnet) {
         return Common.custom(
@@ -114,7 +114,7 @@ export class Common {
             networkId: 137,
           },
           opts
-        )
+        );
       }
       if (chainParamsOrName === CustomChain.PolygonMumbai) {
         return Common.custom(
@@ -124,7 +124,7 @@ export class Common {
             networkId: 80001,
           },
           opts
-        )
+        );
       }
       if (chainParamsOrName === CustomChain.ArbitrumOne) {
         return Common.custom(
@@ -134,7 +134,7 @@ export class Common {
             networkId: 42161,
           },
           opts
-        )
+        );
       }
       if (chainParamsOrName === CustomChain.xDaiChain) {
         return Common.custom(
@@ -144,7 +144,7 @@ export class Common {
             networkId: 100,
           },
           opts
-        )
+        );
       }
 
       if (chainParamsOrName === CustomChain.OptimisticKovan) {
@@ -156,7 +156,7 @@ export class Common {
           },
           // Optimism has not implemented the London hardfork yet (targeting Q1.22)
           { hardfork: Hardfork.Berlin, ...opts }
-        )
+        );
       }
 
       if (chainParamsOrName === CustomChain.OptimisticEthereum) {
@@ -168,9 +168,9 @@ export class Common {
           },
           // Optimism has not implemented the London hardfork yet (targeting Q1.22)
           { hardfork: Hardfork.Berlin, ...opts }
-        )
+        );
       }
-      throw new Error(`Custom chain ${chainParamsOrName} not supported`)
+      throw new Error(`Custom chain ${chainParamsOrName} not supported`);
     }
   }
 
@@ -184,17 +184,21 @@ export class Common {
     genesisJson: any,
     { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }: GethConfigOpts
   ): Common {
-    const genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge)
+    const genesisParams = parseGethGenesis(
+      genesisJson,
+      chain,
+      mergeForkIdPostMerge
+    );
     const common = new Common({
       chain: genesisParams.name ?? 'custom',
       customChains: [genesisParams],
       eips,
       hardfork: hardfork ?? genesisParams.hardfork,
-    })
+    });
     if (genesisHash !== undefined) {
-      common.setForkHashes(genesisHash)
+      common.setForkHashes(genesisHash);
     }
-    return common
+    return common;
   }
 
   /**
@@ -203,54 +207,57 @@ export class Common {
    * @returns boolean
    */
   static isSupportedChainId(chainId: bigint): boolean {
-    const initializedChains = this.getInitializedChains()
-    return Boolean((initializedChains['names'] as ChainName)[chainId.toString()])
+    const initializedChains = this.getInitializedChains();
+    return Boolean(
+      (initializedChains['names'] as ChainName)[chainId.toString()]
+    );
   }
 
   protected static _getChainParams(
     chain: string | number | Chain | bigint,
     customChains?: ChainConfig[]
   ): ChainConfig {
-    const initializedChains = this.getInitializedChains(customChains)
+    const initializedChains = this.getInitializedChains(customChains);
     if (typeof chain === 'number' || typeof chain === 'bigint') {
-      chain = chain.toString()
+      chain = chain.toString();
 
       if ((initializedChains['names'] as ChainName)[chain]) {
-        const name: string = (initializedChains['names'] as ChainName)[chain]
-        return initializedChains[name] as ChainConfig
+        const name: string = (initializedChains['names'] as ChainName)[chain];
+        return initializedChains[name] as ChainConfig;
       }
 
-      throw new Error(`Chain with ID ${chain} not supported`)
+      throw new Error(`Chain with ID ${chain} not supported`);
     }
 
     if (initializedChains[chain] !== undefined) {
-      return initializedChains[chain] as ChainConfig
+      return initializedChains[chain] as ChainConfig;
     }
 
-    throw new Error(`Chain with name ${chain} not supported`)
+    throw new Error(`Chain with name ${chain} not supported`);
   }
 
   constructor(opts: CommonOpts) {
-    this.events = new EventEmitter()
+    this.events = new EventEmitter();
 
-    this._customChains = opts.customChains ?? []
-    this._chainParams = this.setChain(opts.chain)
-    this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Shanghai
+    this._customChains = opts.customChains ?? [];
+    this._chainParams = this.setChain(opts.chain);
+    this.DEFAULT_HARDFORK =
+      this._chainParams.defaultHardfork ?? Hardfork.Shanghai;
     // Assign hardfork changes in the sequence of the applied hardforks
     this.HARDFORK_CHANGES = this.hardforks().map((hf) => [
       hf.name as HardforkSpecKeys,
       HARDFORK_SPECS[hf.name as HardforkSpecKeys],
-    ])
-    this._hardfork = this.DEFAULT_HARDFORK
+    ]);
+    this._hardfork = this.DEFAULT_HARDFORK;
     if (opts.hardfork !== undefined) {
-      this.setHardfork(opts.hardfork)
+      this.setHardfork(opts.hardfork);
     }
     if (opts.eips) {
-      this.setEIPs(opts.eips)
+      this.setEIPs(opts.eips);
     }
     if (Object.keys(this._paramsCache).length === 0) {
-      this._buildParamsCache()
-      this._buildActivatedEIPsCache()
+      this._buildParamsCache();
+      this._buildActivatedEIPsCache();
     }
   }
 
@@ -261,30 +268,34 @@ export class Common {
    * @returns The dictionary with parameters set as chain
    */
   setChain(chain: string | number | Chain | bigint | object): ChainConfig {
-    if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {
-      this._chainParams = Common._getChainParams(chain, this._customChains)
+    if (
+      typeof chain === 'number' ||
+      typeof chain === 'bigint' ||
+      typeof chain === 'string'
+    ) {
+      this._chainParams = Common._getChainParams(chain, this._customChains);
     } else if (typeof chain === 'object') {
       if (this._customChains.length > 0) {
         throw new Error(
           'Chain must be a string, number, or bigint when initialized with customChains passed in'
-        )
+        );
       }
-      const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes']
+      const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];
       for (const param of required) {
         if (!(param in chain)) {
-          throw new Error(`Missing required chain parameter: ${param}`)
+          throw new Error(`Missing required chain parameter: ${param}`);
         }
       }
-      this._chainParams = chain as ChainConfig
+      this._chainParams = chain as ChainConfig;
     } else {
-      throw new Error('Wrong input format')
+      throw new Error('Wrong input format');
     }
     for (const hf of this.hardforks()) {
       if (hf.block === undefined) {
-        throw new Error(`Hardfork cannot have undefined block number`)
+        throw new Error(`Hardfork cannot have undefined block number`);
       }
     }
-    return this._chainParams
+    return this._chainParams;
   }
 
   /**
@@ -292,20 +303,20 @@ export class Common {
    * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum
    */
   setHardfork(hardfork: string | Hardfork): void {
-    let existing = false
+    let existing = false;
     for (const hfChanges of this.HARDFORK_CHANGES) {
       if (hfChanges[0] === hardfork) {
         if (this._hardfork !== hardfork) {
-          this._hardfork = hardfork
-          this._buildParamsCache()
-          this._buildActivatedEIPsCache()
-          this.events.emit('hardforkChanged', hardfork)
+          this._hardfork = hardfork;
+          this._buildParamsCache();
+          this._buildActivatedEIPsCache();
+          this.events.emit('hardforkChanged', hardfork);
         }
-        existing = true
+        existing = true;
       }
     }
     if (!existing) {
-      throw new Error(`Hardfork with name ${hardfork} not supported`)
+      throw new Error(`Hardfork with name ${hardfork} not supported`);
     }
   }
 
@@ -321,23 +332,31 @@ export class Common {
    * @returns The name of the HF
    */
   getHardforkBy(opts: HardforkByOpts): string {
-    let { blockNumber, timestamp, td } = opts
-
-    blockNumber = toType(blockNumber, TypeOutput.BigInt)
-    td = toType(td, TypeOutput.BigInt)
-    timestamp = toType(timestamp, TypeOutput.BigInt)
+    const blockNumber: bigint | undefined = toType(
+      opts.blockNumber,
+      TypeOutput.BigInt
+    );
+    const td: bigint | undefined = toType(opts.td, TypeOutput.BigInt);
+    const timestamp: bigint | undefined = toType(
+      opts.timestamp,
+      TypeOutput.BigInt
+    );
 
     // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)
     const hfs = this.hardforks().filter(
       (hf) =>
-        hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined
-    )
-    const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined)
+        hf.block !== null ||
+        (hf.ttd !== null && hf.ttd !== undefined) ||
+        hf.timestamp !== undefined
+    );
+    const mergeIndex = hfs.findIndex(
+      (hf) => hf.ttd !== null && hf.ttd !== undefined
+    );
     const doubleTTDHF = hfs
       .slice(mergeIndex + 1)
-      .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined)
+      .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);
     if (doubleTTDHF >= 0) {
-      throw Error(`More than one merge hardforks found with ttd specified`)
+      throw Error(`More than one merge hardforks found with ttd specified`);
     }
 
     // Find the first hardfork that has a block number greater than `blockNumber`
@@ -348,17 +367,19 @@ export class Common {
       (hf) =>
         (blockNumber !== undefined &&
           hf.block !== null &&
-          BigInt(hf.block) > (blockNumber as bigint)) ||
-        (timestamp !== undefined && hf.timestamp !== undefined && hf.timestamp > timestamp)
-    )
+          BigInt(hf.block) > blockNumber) ||
+        (timestamp !== undefined &&
+          hf.timestamp !== undefined &&
+          BigInt(hf.timestamp) > timestamp)
+    );
 
     if (hfIndex === -1) {
       // all hardforks apply, set hfIndex to the last one as that's the candidate
-      hfIndex = hfs.length
+      hfIndex = hfs.length;
     } else if (hfIndex === 0) {
       // cannot have a case where a block number is before all applied hardforks
       // since the chain has to start with a hardfork
-      throw Error('Must have at least one hardfork at block 0')
+      throw Error('Must have at least one hardfork at block 0');
     }
 
     // If timestamp is not provided, we need to rollback to the last hf with block or ttd
@@ -366,11 +387,11 @@ export class Common {
       const stepBack = hfs
         .slice(0, hfIndex)
         .reverse()
-        .findIndex((hf) => hf.block !== null || hf.ttd !== undefined)
-      hfIndex = hfIndex - stepBack
+        .findIndex((hf) => hf.block !== null || hf.ttd !== undefined);
+      hfIndex = hfIndex - stepBack;
     }
     // Move hfIndex one back to arrive at candidate hardfork
-    hfIndex = hfIndex - 1
+    hfIndex = hfIndex - 1;
 
     // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number
     // hardforks. so it will now be needed to rollback
@@ -378,19 +399,23 @@ export class Common {
       // We're on the merge hardfork.  Let's check the TTD
       if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd!) > td) {
         // Merge ttd greater than current td so we're on hardfork before merge
-        hfIndex -= 1
+        hfIndex -= 1;
       }
     } else {
       if (mergeIndex >= 0 && td !== undefined && td !== null) {
         if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd!) > td) {
-          throw Error('Maximum HF determined by total difficulty is lower than the block number HF')
+          throw Error(
+            'Maximum HF determined by total difficulty is lower than the block number HF'
+          );
         } else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd!) < td) {
-          throw Error('HF determined by block number is lower than the minimum total difficulty HF')
+          throw Error(
+            'HF determined by block number is lower than the minimum total difficulty HF'
+          );
         }
       }
     }
 
-    const hfStartIndex = hfIndex
+    const hfStartIndex = hfIndex;
     // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp
     // This won't anyway be the case with Merge hfs
     for (; hfIndex < hfs.length - 1; hfIndex++) {
@@ -399,7 +424,7 @@ export class Common {
         hfs[hfIndex].block !== hfs[hfIndex + 1].block ||
         hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp
       ) {
-        break
+        break;
       }
     }
 
@@ -407,11 +432,14 @@ export class Common {
       const minTimeStamp = hfs
         .slice(0, hfStartIndex)
         .reduce(
-          (acc: number, hf: HardforkTransitionConfig) => Math.max(Number(hf.timestamp ?? '0'), acc),
+          (acc: number, hf: HardforkTransitionConfig) =>
+            Math.max(Number(hf.timestamp ?? '0'), acc),
           0
-        )
+        );
       if (minTimeStamp > timestamp) {
-        throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`)
+        throw Error(
+          `Maximum HF determined by timestamp is lower than the block number/ttd HF`
+        );
       }
 
       const maxTimeStamp = hfs
@@ -420,13 +448,15 @@ export class Common {
           (acc: number, hf: HardforkTransitionConfig) =>
             Math.min(Number(hf.timestamp ?? timestamp), acc),
           Number(timestamp)
-        )
+        );
       if (maxTimeStamp < timestamp) {
-        throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`)
+        throw Error(
+          `Maximum HF determined by block number/ttd is lower than timestamp HF`
+        );
       }
     }
-    const hardfork = hfs[hfIndex]
-    return hardfork.name
+    const hardfork = hfs[hfIndex];
+    return hardfork.name;
   }
 
   /**
@@ -441,9 +471,9 @@ export class Common {
    * @returns The name of the HF set
    */
   setHardforkBy(opts: HardforkByOpts): string {
-    const hardfork = this.getHardforkBy(opts)
-    this.setHardfork(hardfork)
-    return hardfork
+    const hardfork = this.getHardforkBy(opts);
+    this.setHardfork(hardfork);
+    return hardfork;
   }
 
   /**
@@ -451,12 +481,14 @@ export class Common {
    * @param hardfork Hardfork name
    * @returns Dictionary with hardfork params or null if hardfork not on chain
    */
-  protected _getHardfork(hardfork: string | Hardfork): HardforkTransitionConfig | null {
-    const hfs = this.hardforks()
+  protected _getHardfork(
+    hardfork: string | Hardfork
+  ): HardforkTransitionConfig | null {
+    const hfs = this.hardforks();
     for (const hf of hfs) {
-      if (hf['name'] === hardfork) return hf
+      if (hf['name'] === hardfork) return hf;
     }
-    return null
+    return null;
   }
 
   /**
@@ -466,24 +498,26 @@ export class Common {
   setEIPs(eips: number[] = []) {
     for (const eip of eips) {
       if (!(eip in EIPs)) {
-        throw new Error(`${eip} not supported`)
+        throw new Error(`${eip} not supported`);
       }
-      const minHF = this.gteHardfork((EIPs as any)[eip]['minimumHardfork'])
+      const minHF = this.gteHardfork((EIPs as any)[eip]['minimumHardfork']);
       if (!minHF) {
         throw new Error(
           `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`
-        )
+        );
       }
     }
-    this._eips = eips
-    this._buildParamsCache()
-    this._buildActivatedEIPsCache()
+    this._eips = eips;
+    this._buildParamsCache();
+    this._buildActivatedEIPsCache();
 
     for (const eip of eips) {
       if ((EIPs as any)[eip].requiredEIPs !== undefined) {
         for (const elem of (EIPs as any)[eip].requiredEIPs) {
           if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {
-            throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`)
+            throw new Error(
+              `${eip} requires EIP ${elem}, but is not included in the EIP list`
+            );
           }
         }
       }
@@ -497,69 +531,71 @@ export class Common {
     this._paramsCache['gasConfig'] = {
       ...this._paramsCache['gasConfig'],
       ...params['gasConfig'],
-    }
+    };
     this._paramsCache['gasPrices'] = {
       ...this._paramsCache['gasPrices'],
       ...params['gasPrices'],
-    }
+    };
     this._paramsCache['pow'] = {
       ...this._paramsCache['pow'],
       ...params['pow'],
-    }
+    };
     this._paramsCache['sharding'] = {
       ...this._paramsCache['sharding'],
       ...params['sharding'],
-    }
+    };
     this._paramsCache['vm'] = {
       ...this._paramsCache['vm'],
       ...params['vm'],
-    }
+    };
   }
 
   /**
    * Build up a cache for all parameter values for the current HF and all activated EIPs
    */
   protected _buildParamsCache() {
-    this._paramsCache = {}
+    this._paramsCache = {};
     // Iterate through all hardforks up to hardfork set
-    const hardfork = this.hardfork()
+    const hardfork = this.hardfork();
     for (const hfChanges of this.HARDFORK_CHANGES) {
       // EIP-referencing HF config (e.g. for berlin)
       if ('eips' in hfChanges[1]) {
-        const hfEIPs = hfChanges[1]['eips']
+        const hfEIPs = hfChanges[1]['eips'];
         for (const eip of hfEIPs!) {
           if (!(eip in EIPs)) {
-            throw new Error(`${eip} not supported`)
+            throw new Error(`${eip} not supported`);
           }
 
-          this._mergeWithParamsCache(EIPs[eip])
+          this._mergeWithParamsCache(EIPs[eip]);
         }
         // Parameter-inlining HF config (e.g. for istanbul)
       } else {
-        this._mergeWithParamsCache(hfChanges[1])
+        this._mergeWithParamsCache(hfChanges[1]);
       }
-      if (hfChanges[0] === hardfork) break
+      if (hfChanges[0] === hardfork) break;
     }
     // Iterate through all additionally activated EIPs
     for (const eip of this._eips) {
       if (!(eip in EIPs)) {
-        throw new Error(`${eip} not supported`)
+        throw new Error(`${eip} not supported`);
       }
 
-      this._mergeWithParamsCache(EIPs[eip])
+      this._mergeWithParamsCache(EIPs[eip]);
     }
   }
 
   protected _buildActivatedEIPsCache() {
-    this._activatedEIPsCache = []
+    this._activatedEIPsCache = [];
 
     for (const hfChanges of this.HARDFORK_CHANGES) {
-      const hf = hfChanges[1]
+      const hf = hfChanges[1];
       if (this.gteHardfork(hf['name']) && 'eips' in hf) {
-        this._activatedEIPsCache = this._activatedEIPsCache.concat(hf['eips'] as number[])
+        this._activatedEIPsCache = this._activatedEIPsCache.concat(
+          hf['eips'] as number[]
+        );
       }
     }
-    this._activatedEIPsCache = this._activatedEIPsCache.concat(this._eips)
+    this._activatedEIPsCache = this._activatedEIPsCache.concat(this._eips);
   }
 
   /**
@@ -576,14 +612,14 @@ export class Common {
   param(topic: string, name: string): bigint {
     // TODO: consider the case that different active EIPs
     // can change the same parameter
-    let value = null
+    let value = null;
     if (
       (this._paramsCache as any)[topic] !== undefined &&
       (this._paramsCache as any)[topic][name] !== undefined
     ) {
-      value = (this._paramsCache as any)[topic][name].v
+      value = (this._paramsCache as any)[topic][name].v;
     }
-    return BigInt(value ?? 0)
+    return BigInt(value ?? 0);
   }
 
   /**
@@ -593,15 +629,19 @@ export class Common {
    * @param hardfork Hardfork name
    * @returns The value requested or `BigInt(0)` if not found
    */
-  paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): bigint {
-    let value = null
+  paramByHardfork(
+    topic: string,
+    name: string,
+    hardfork: string | Hardfork
+  ): bigint {
+    let value: bigint | null = null;
     for (const hfChanges of this.HARDFORK_CHANGES) {
       // EIP-referencing HF config (e.g. for berlin)
       if ('eips' in hfChanges[1]) {
-        const hfEIPs = hfChanges[1]['eips']
+        const hfEIPs = hfChanges[1]['eips'];
         for (const eip of hfEIPs!) {
-          const valueEIP = this.paramByEIP(topic, name, eip)
-          value = typeof valueEIP === 'bigint' ? valueEIP : value
+          const valueEIP = this.paramByEIP(topic, name, eip);
+          value = typeof valueEIP === 'bigint' ? valueEIP : value;
         }
         // Parameter-inlining HF config (e.g. for istanbul)
       } else {
@@ -609,12 +649,12 @@ export class Common {
           (hfChanges[1] as any)[topic] !== undefined &&
           (hfChanges[1] as any)[topic][name] !== undefined
         ) {
-          value = (hfChanges[1] as any)[topic][name].v
+          value = (hfChanges[1] as any)[topic][name].v;
         }
       }
-      if (hfChanges[0] === hardfork) break
+      if (hfChanges[0] === hardfork) break;
     }
-    return BigInt(value ?? 0)
+    return BigInt(value ?? 0);
   }
 
   /**
@@ -626,18 +666,18 @@ export class Common {
    */
   paramByEIP(topic: string, name: string, eip: number): bigint | undefined {
     if (!(eip in EIPs)) {
-      throw new Error(`${eip} not supported`)
+      throw new Error(`${eip} not supported`);
     }
 
-    const eipParams = (EIPs as any)[eip]
+    const eipParams = (EIPs as any)[eip];
     if (!(topic in eipParams)) {
-      return undefined
+      return undefined;
     }
     if (eipParams[topic][name] === undefined) {
-      return undefined
+      return undefined;
     }
-    const value = eipParams[topic][name].v
-    return BigInt(value)
+    const value = eipParams[topic][name].v;
+    return BigInt(value);
   }
 
   /**
@@ -656,8 +696,8 @@ export class Common {
     td?: BigIntLike,
     timestamp?: BigIntLike
   ): bigint {
-    const hardfork = this.getHardforkBy({ blockNumber, td, timestamp })
-    return this.paramByHardfork(topic, name, hardfork)
+    const hardfork = this.getHardforkBy({ blockNumber, td, timestamp });
+    return this.paramByHardfork(topic, name, hardfork);
   }
 
   /**
@@ -671,9 +711,9 @@ export class Common {
    */
   isActivatedEIP(eip: number): boolean {
     if (this._activatedEIPsCache.includes(eip)) {
-      return true
+      return true;
     }
-    return false
+    return false;
   }
 
   /**
@@ -682,14 +722,21 @@ export class Common {
    * @param blockNumber
    * @returns True if HF is active on block number
    */
-  hardforkIsActiveOnBlock(hardfork: string | Hardfork | null, blockNumber: BigIntLike): boolean {
-    blockNumber = toType(blockNumber, TypeOutput.BigInt)
-    hardfork = hardfork ?? this._hardfork
-    const hfBlock = this.hardforkBlock(hardfork)
-    if (typeof hfBlock === 'bigint' && hfBlock !== BIGINT_0 && blockNumber >= hfBlock) {
-      return true
+  hardforkIsActiveOnBlock(
+    hardfork: string | Hardfork | null,
+    blockNumber: BigIntLike
+  ): boolean {
+    blockNumber = toType(blockNumber, TypeOutput.BigInt);
+    hardfork = hardfork ?? this._hardfork;
+    const hfBlock = this.hardforkBlock(hardfork);
+    if (
+      typeof hfBlock === 'bigint' &&
+      hfBlock !== BIGINT_0 &&
+      blockNumber >= hfBlock
+    ) {
+      return true;
     }
-    return false
+    return false;
   }
 
   /**
@@ -698,7 +745,7 @@ export class Common {
    * @returns True if HF is active on block number
    */
   activeOnBlock(blockNumber: BigIntLike): boolean {
-    return this.hardforkIsActiveOnBlock(null, blockNumber)
+    return this.hardforkIsActiveOnBlock(null, blockNumber);
   }
 
   /**
@@ -708,19 +755,22 @@ export class Common {
    * @param opts Hardfork options
    * @returns True if HF1 gte HF2
    */
-  hardforkGteHardfork(hardfork1: string | Hardfork | null, hardfork2: string | Hardfork): boolean {
-    hardfork1 = hardfork1 ?? this._hardfork
-    const hardforks = this.hardforks()
+  hardforkGteHardfork(
+    hardfork1: string | Hardfork | null,
+    hardfork2: string | Hardfork
+  ): boolean {
+    hardfork1 = hardfork1 ?? this._hardfork;
+    const hardforks = this.hardforks();
 
     let posHf1 = -1,
-      posHf2 = -1
-    let index = 0
+      posHf2 = -1;
+    let index = 0;
     for (const hf of hardforks) {
-      if (hf['name'] === hardfork1) posHf1 = index
-      if (hf['name'] === hardfork2) posHf2 = index
-      index += 1
+      if (hf['name'] === hardfork1) posHf1 = index;
+      if (hf['name'] === hardfork2) posHf2 = index;
+      index += 1;
     }
-    return posHf1 >= posHf2 && posHf2 !== -1
+    return posHf1 >= posHf2 && posHf2 !== -1;
   }
 
   /**
@@ -729,7 +779,7 @@ export class Common {
    * @returns True if hardfork set is greater than hardfork provided
    */
   gteHardfork(hardfork: string | Hardfork): boolean {
-    return this.hardforkGteHardfork(null, hardfork)
+    return this.hardforkGteHardfork(null, hardfork);
   }
 
   /**
@@ -738,21 +788,21 @@ export class Common {
    * @returns Block number or null if unscheduled
    */
   hardforkBlock(hardfork?: string | Hardfork): bigint | null {
-    hardfork = hardfork ?? this._hardfork
-    const block = this._getHardfork(hardfork)?.['block']
+    hardfork = hardfork ?? this._hardfork;
+    const block = this._getHardfork(hardfork)?.['block'];
     if (block === undefined || block === null) {
-      return null
+      return null;
     }
-    return BigInt(block)
+    return BigInt(block);
   }
 
   hardforkTimestamp(hardfork?: string | Hardfork): bigint | null {
-    hardfork = hardfork ?? this._hardfork
-    const timestamp = this._getHardfork(hardfork)?.['timestamp']
+    hardfork = hardfork ?? this._hardfork;
+    const timestamp = this._getHardfork(hardfork)?.['timestamp'];
     if (timestamp === undefined || timestamp === null) {
-      return null
+      return null;
     }
-    return BigInt(timestamp)
+    return BigInt(timestamp);
   }
 
   /**
@@ -762,15 +812,15 @@ export class Common {
    */
   eipBlock(eip: number): bigint | null {
     for (const hfChanges of this.HARDFORK_CHANGES) {
-      const hf = hfChanges[1]
+      const hf = hfChanges[1];
       if ('eips' in hf) {
         // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
         if ((hf['eips'] as any).includes(eip)) {
-          return this.hardforkBlock(hfChanges[0])
+          return this.hardforkBlock(hfChanges[0]);
         }
       }
     }
-    return null
+    return null;
   }
 
   /**
@@ -779,12 +829,12 @@ export class Common {
    * @returns Total difficulty or null if no set
    */
   hardforkTTD(hardfork?: string | Hardfork): bigint | null {
-    hardfork = hardfork ?? this._hardfork
-    const ttd = this._getHardfork(hardfork)?.['ttd']
+    hardfork = hardfork ?? this._hardfork;
+    const ttd = this._getHardfork(hardfork)?.['ttd'];
     if (ttd === undefined || ttd === null) {
-      return null
+      return null;
     }
-    return BigInt(ttd)
+    return BigInt(ttd);
   }
 
   /**
@@ -793,47 +843,49 @@ export class Common {
    * @returns Block timestamp, number or null if not available
    */
   nextHardforkBlockOrTimestamp(hardfork?: string | Hardfork): bigint | null {
-    hardfork = hardfork ?? this._hardfork
-    const hfs = this.hardforks()
-    let hfIndex = hfs.findIndex((hf) => hf.name === hardfork)
+    hardfork = hardfork ?? this._hardfork;
+    const hfs = this.hardforks();
+    let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);
     // If the current hardfork is merge, go one behind as merge hf is not part of these
     // calcs even if the merge hf block is set
     if (hardfork === Hardfork.Paris) {
-      hfIndex -= 1
+      hfIndex -= 1;
     }
     // Hardfork not found
     if (hfIndex < 0) {
-      return null
+      return null;
     }
 
-    let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block
+    let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;
     currHfTimeOrBlock =
       currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined
         ? Number(currHfTimeOrBlock)
-        : null
+        : null;
 
     const nextHf = hfs.slice(hfIndex + 1).find((hf) => {
-      let hfTimeOrBlock = hf.timestamp ?? hf.block
+      let hfTimeOrBlock = hf.timestamp ?? hf.block;
       hfTimeOrBlock =
-        hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null
+        hfTimeOrBlock !== null && hfTimeOrBlock !== undefined
+          ? Number(hfTimeOrBlock)
+          : null;
       return (
         hf.name !== Hardfork.Paris &&
         hfTimeOrBlock !== null &&
         hfTimeOrBlock !== undefined &&
         hfTimeOrBlock !== currHfTimeOrBlock
-      )
-    })
+      );
+    });
     // If no next hf found with valid block or timestamp return null
     if (nextHf === undefined) {
-      return null
+      return null;
     }
 
-    const nextHfBlock = nextHf.timestamp ?? nextHf.block
+    const nextHfBlock = nextHf.timestamp ?? nextHf.block;
     if (nextHfBlock === null || nextHfBlock === undefined) {
-      return null
+      return null;
     }
 
-    return BigInt(nextHfBlock)
+    return BigInt(nextHfBlock);
   }
 
   /**
@@ -842,15 +894,18 @@ export class Common {
    * @param genesisHash Genesis block hash of the chain
    * @returns Fork hash as hex string
    */
-  protected _calcForkHash(hardfork: string | Hardfork, genesisHash: Uint8Array): PrefixedHexString {
-    let hfBytes = new Uint8Array(0)
-    let prevBlockOrTime = 0
+  protected _calcForkHash(
+    hardfork: string | Hardfork,
+    genesisHash: Uint8Array
+  ): PrefixedHexString {
+    let hfBytes = new Uint8Array(0);
+    let prevBlockOrTime = 0;
     for (const hf of this.hardforks()) {
-      const { block, timestamp, name } = hf
+      const { block, timestamp, name } = hf;
       // Timestamp to be used for timestamp based hfs even if we may bundle
       // block number with them retrospectively
-      let blockOrTime = timestamp ?? block
-      blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null
+      let blockOrTime = timestamp ?? block;
+      blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;
 
       // Skip for chainstart (0), not applied HFs (null) and
       // when already applied on same blockOrTime HFs
@@ -861,19 +916,21 @@ export class Common {
         blockOrTime !== prevBlockOrTime &&
         name !== Hardfork.Paris
       ) {
-        const hfBlockBytes = hexToBytes('0x' + blockOrTime.toString(16).padStart(16, '0'))
-        hfBytes = concatBytes(hfBytes, hfBlockBytes)
-        prevBlockOrTime = blockOrTime
+        const hfBlockBytes = hexToBytes(
+          '0x' + blockOrTime.toString(16).padStart(16, '0')
+        );
+        hfBytes = concatBytes(hfBytes, hfBlockBytes);
+        prevBlockOrTime = blockOrTime;
       }
 
-      if (hf.name === hardfork) break
+      if (hf.name === hardfork) break;
     }
-    const inputBytes = concatBytes(genesisHash, hfBytes)
+    const inputBytes = concatBytes(genesisHash, hfBytes);
 
     // CRC32 delivers result as signed (negative) 32-bit integer,
     // convert to hex string
-    const forkhash = bytesToHex(intToBytes(crc(inputBytes) >>> 0))
-    return forkhash
+    const forkhash = bytesToHex(intToBytes(crc(inputBytes) >>> 0));
+    return forkhash;
   }
 
   /**
@@ -881,21 +938,27 @@ export class Common {
    * @param hardfork Hardfork name, optional if HF set
    * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated
    */
-  forkHash(hardfork?: string | Hardfork, genesisHash?: Uint8Array): PrefixedHexString {
-    hardfork = hardfork ?? this._hardfork
-    const data = this._getHardfork(hardfork)
+  forkHash(
+    hardfork?: string | Hardfork,
+    genesisHash?: Uint8Array
+  ): PrefixedHexString {
+    hardfork = hardfork ?? this._hardfork;
+    const data = this._getHardfork(hardfork);
     if (
       data === null ||
-      (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)
+      (data?.block === null &&
+        data?.timestamp === undefined &&
+        data?.ttd === undefined)
     ) {
-      const msg = 'No fork hash calculation possible for future hardfork'
-      throw new Error(msg)
+      const msg = 'No fork hash calculation possible for future hardfork';
+      throw new Error(msg);
     }
     if (data?.forkHash !== null && data?.forkHash !== undefined) {
-      return data.forkHash
+      return data.forkHash;
     }
-    if (!genesisHash) throw new Error('genesisHash required for forkHash calculation')
-    return this._calcForkHash(hardfork, genesisHash)
+    if (!genesisHash)
+      throw new Error('genesisHash required for forkHash calculation');
+    return this._calcForkHash(hardfork, genesisHash);
   }
 
   /**
@@ -905,9 +968,9 @@ export class Common {
    */
   hardforkForForkHash(forkHash: string): HardforkTransitionConfig | null {
     const resArray = this.hardforks().filter((hf: HardforkTransitionConfig) => {
-      return hf.forkHash === forkHash
-    })
-    return resArray.length >= 1 ? resArray[resArray.length - 1] : null
+      return hf.forkHash === forkHash;
+    });
+    return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
   }
 
   /**
@@ -917,12 +980,13 @@ export class Common {
    */
   setForkHashes(genesisHash: Uint8Array) {
     for (const hf of this.hardforks()) {
-      const blockOrTime = hf.timestamp ?? hf.block
+      const blockOrTime = hf.timestamp ?? hf.block;
       if (
         (hf.forkHash === null || hf.forkHash === undefined) &&
-        ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')
+        ((blockOrTime !== null && blockOrTime !== undefined) ||
+          typeof hf.ttd !== 'undefined')
       ) {
-        hf.forkHash = this.forkHash(hf.name, genesisHash)
+        hf.forkHash = this.forkHash(hf.name, genesisHash);
       }
     }
   }
@@ -932,7 +996,7 @@ export class Common {
    * @returns Genesis dictionary
    */
   genesis(): GenesisBlockConfig {
-    return this._chainParams.genesis
+    return this._chainParams.genesis;
   }
 
   /**
@@ -940,7 +1004,7 @@ export class Common {
    * @returns {Array} Array with arrays of hardforks
    */
   hardforks(): HardforkTransitionConfig[] {
-    return this._chainParams.hardforks
+    return this._chainParams.hardforks;
   }
 
   /**
@@ -948,7 +1012,7 @@ export class Common {
    * @returns {Dictionary} Dict with bootstrap nodes
    */
   bootstrapNodes(): BootstrapNodeConfig[] {
-    return this._chainParams.bootstrapNodes
+    return this._chainParams.bootstrapNodes;
   }
 
   /**
@@ -956,7 +1020,7 @@ export class Common {
    * @returns {String[]} Array of DNS ENR urls
    */
   dnsNetworks(): string[] {
-    return this._chainParams.dnsNetworks!
+    return this._chainParams.dnsNetworks!;
   }
 
   /**
@@ -964,7 +1028,7 @@ export class Common {
    * @returns Hardfork name
    */
   hardfork(): string | Hardfork {
-    return this._hardfork
+    return this._hardfork;
   }
 
   /**
@@ -972,7 +1036,7 @@ export class Common {
    * @returns chain Id
    */
   chainId(): bigint {
-    return BigInt(this._chainParams.chainId)
+    return BigInt(this._chainParams.chainId);
   }
 
   /**
@@ -980,7 +1044,7 @@ export class Common {
    * @returns chain name (lower case)
    */
   chainName(): string {
-    return this._chainParams.name
+    return this._chainParams.name;
   }
 
   /**
@@ -988,7 +1052,7 @@ export class Common {
    * @returns network Id
    */
   networkId(): bigint {
-    return BigInt(this._chainParams.networkId)
+    return BigInt(this._chainParams.networkId);
   }
 
   /**
@@ -997,7 +1061,7 @@ export class Common {
    * @returns List of EIPs
    */
   eips(): number[] {
-    return this._eips
+    return this._eips;
   }
 
   /**
@@ -1007,16 +1071,16 @@ export class Common {
    * Note: This value can update along a Hardfork.
    */
   consensusType(): string | ConsensusType {
-    const hardfork = this.hardfork()
+    const hardfork = this.hardfork();
 
-    let value
+    let value;
     for (const hfChanges of this.HARDFORK_CHANGES) {
       if ('consensus' in hfChanges[1]) {
-        value = (hfChanges[1] as any)['consensus']['type']
+        value = (hfChanges[1] as any)['consensus']['type'];
       }
-      if (hfChanges[0] === hardfork) break
+      if (hfChanges[0] === hardfork) break;
     }
-    return value ?? this._chainParams['consensus']['type']
+    return value ?? this._chainParams['consensus']['type'];
   }
 
   /**
@@ -1029,16 +1093,19 @@ export class Common {
    * Note: This value can update along a Hardfork.
    */
   consensusAlgorithm(): string | ConsensusAlgorithm {
-    const hardfork = this.hardfork()
+    const hardfork = this.hardfork();
 
-    let value
+    let value;
     for (const hfChanges of this.HARDFORK_CHANGES) {
       if ('consensus' in hfChanges[1]) {
-        value = hfChanges[1]['consensus']!['algorithm']
+        value = hfChanges[1]['consensus']!['algorithm'];
       }
-      if (hfChanges[0] === hardfork) break
+      if (hfChanges[0] === hardfork) break;
     }
-    return value ?? (this._chainParams['consensus']['algorithm'] as ConsensusAlgorithm)
+    return (
+      value ??
+      (this._chainParams['consensus']['algorithm'] as ConsensusAlgorithm)
+    );
   }
 
   /**
@@ -1054,47 +1121,56 @@ export class Common {
    *
    * Note: This value can update along a Hardfork.
    */
-  consensusConfig(): { [key: string]: CliqueConfig | EthashConfig | CasperConfig } {
-    const hardfork = this.hardfork()
+  consensusConfig(): {
+    [key: string]: CliqueConfig | EthashConfig | CasperConfig;
+  } {
+    const hardfork = this.hardfork();
 
-    let value
+    let value;
     for (const hfChanges of this.HARDFORK_CHANGES) {
       if ('consensus' in hfChanges[1]) {
         // The config parameter is named after the respective consensus algorithm
-        const config = hfChanges[1]
-        const algorithm = config['consensus']!['algorithm']
-        value = (config['consensus'] as any)[algorithm]
+        const config = hfChanges[1];
+        const algorithm = config['consensus']!['algorithm'];
+        value = (config['consensus'] as any)[algorithm];
       }
-      if (hfChanges[0] === hardfork) break
+      if (hfChanges[0] === hardfork) break;
     }
     return (
-      value ?? this._chainParams['consensus'][this.consensusAlgorithm() as ConsensusAlgorithm] ?? {}
-    )
+      value ??
+      this._chainParams['consensus'][
+        this.consensusAlgorithm() as ConsensusAlgorithm
+      ] ??
+      {}
+    );
   }
 
   /**
    * Returns a deep copy of this {@link Common} instance.
    */
   copy(): Common {
-    const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this)
-    copy.events = new EventEmitter()
-    return copy
+    const copy = Object.assign(
+      Object.create(Object.getPrototypeOf(this)),
+      this
+    );
+    copy.events = new EventEmitter();
+    return copy;
   }
 
   static getInitializedChains(customChains?: ChainConfig[]): ChainsConfig {
-    const names: ChainName = {}
+    const names: ChainName = {};
     for (const [name, id] of Object.entries(Chain)) {
-      names[id] = name.toLowerCase()
+      names[id] = name.toLowerCase();
     }
-    const chains = { ...CHAIN_SPECS } as ChainsConfig
+    const chains = { ...CHAIN_SPECS } as ChainsConfig;
     if (customChains) {
       for (const chain of customChains) {
-        const { name } = chain
-        names[chain.chainId.toString()] = name
-        chains[name] = chain
+        const { name } = chain;
+        names[chain.chainId.toString()] = name;
+        chains[name] = chain;
       }
     }
-    chains.names = names
-    return chains
+    chains.names = names;
+    return chains;
   }
 }
